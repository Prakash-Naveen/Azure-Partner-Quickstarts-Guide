<h3><b><u>D. Choosing free-form vs. known configurations</u></b></h3>
You might initially think a template should give consumers the utmost flexibility, but many considerations affect the choice of whether to
use free-form configurations vs. known configurations. This section identifies the key customer requirements and technical considerations 
that shaped the approach shared in this document.<br/>
<b>Free-form configurations:</b>

On the surface, free-form configurations sound ideal. They allow you to select a VM type and provide an arbitrary number of nodes and 
attached disks for those nodes — and do so as parameters to a template. However, this approach is not ideal for some scenarios.
In Sizes for virtual machines, the different VM types and available sizes are identified, and each of the number of durable disks 
(2, 4, 8, 16, or 32) that can be attached. Each attached disk provides 500 IOPS and multiples of these disks can be pooled for a multiplier
of that number of IOPS. For example, 16 disks can be pooled to provide 8,000 IOPS. Pooling is done with configuration in the operating
system, using Microsoft Windows Storage Spaces or redundant array of inexpensive disks (RAID) in Linux.A free-form configuration enables
the selection several VM instances, various VM types and sizes for those instances, various disks for the VM type, and one or more scripts
to configure the VM contents.<br/>
It is common that a deployment may have multiple types of nodes, such as master and data nodes, so this flexibility is often provided for
every node type.<br/>
As you start to deploy clusters of any significance, you begin to work with these complex scenarios. If you were deploying a Hadoop 
cluster, for example, with 8 master nodes and 200 data nodes, and pooled 4 attached disks on each master node and pooled 16 attached 
disks per data node, you would have 208 VMs and 3,232 disks to manage.<br/>

A storage account will throttle requests above its identified 20,000 transactions/second limit, so you should look at storage account
partitioning and use calculations to determine the appropriate number of storage accounts to accommodate this topology. Given the 
multitude of combinations supported by the free-form approach, dynamic calculations are required to determine the appropriate partitioning.
The Azure Resource Manager Template Language does not presently provide mathematical functions, so you must perform these calculations
in code, generating a unique, hard-coded template with the appropriate details.<br/>

In enterprise IT and SI scenarios, someone must maintain the templates and support the deployed topologies for one or more organizations.
This additional overhead — different configurations and templates for each customer — is far from desirable.<br/>

Considering all these factors, a truly free-form configuration is less appealing than at first blush.<br/>

Known configurations - the t-shirt sizing approach: <br/>

Rather than offer a template that provides total flexibility and countless variations, in our experience a common pattern is to provide<br/>
the ability to select known configurations — in effect, standard t-shirt sizes such as sandbox, small, medium, and large. Other examples
of t-shirt sizes are product offerings, such as community edition or enterprise edition. In other cases, it may be workload-specific
configurations of a technology – such as map reduce or no sql.<br/>
Many enterprise IT organizations, OSS vendors, and SIs make their offerings available today in this way in on-premises, virtualized
environments (enterprises) or as software-as-a-service (SaaS) offerings (CSVs and OSVs).<br/>
This approach provides good, known configurations of varying sizes that are preconfigured for customers. Without known configurations,
end customers must determine cluster sizing on their own, factor in platform resource constraints, and do math to identify the resulting
partitioning of storage accounts and other resources (due to cluster size and resource constraints). Known configurations enable 
customers to easily select the right t-shirt size—that is, a given deployment. In addition to making a better experience for the 
customer, a small number of known configurations is easier to support and can help you deliver a higher level of density.<br/>

A known configuration approach focused on t-shirt sizes may also have varying number of nodes within a size. For example, a small t-shirt
size may be between 3 and 10 nodes. The t-shirt size would be designed to accommodate up to 10 nodes and provide the consumer the ability
to make free form selections up to the maximum size identified.<br/>
A t-shirt size based on workload type, may be more free form in nature in terms of the number of nodes that can be deployed but will have
workload distinct node size and configuration of the software on the node.<br/>
T-shirt sizes based on product offerings, such as community or Enterprise, may have distinct resource types and maximum number of nodes
that can be deployed, typically tied to licensing considerations or feature availability across the different offerings.<br/>
You can also accommodate customers with unique variants using the JSON-based templates. When dealing with outliers, you can incorporate
the appropriate planning and considerations for development, support, and costing. Based on the customer template consumption scenarios,
and requirements identified at the start of this document, we identified a pattern for template decomposition.
